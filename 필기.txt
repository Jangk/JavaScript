디버깅 실행은 html에서만 할것.
자바스크립트에서 실행시 luanch.js 생성되는데 이게 있으면 로컬 호스트 연결이 안됨.


기본 디폴트
<!DOCTYPE html>                                                                 // 이 문서가 html이라는 것을 알림
<html lang="ko">                                                                // 언어 ko로 설정
<head>
	<meta charset="UTF-8">                                                      // 유니코드 
	<meta name="viewport" content="width=device-width, initial-scale=1.0">      // 
	<meta http-equiv="X-UA-Compatible" content="ie=edge">
</head>
기본 디폴트


// html
<button 버튼클래스명 = "btn" onclick="실행할 내용">출력내용</button>               // 버튼 생성 html에서 작동
<div id = "식별ID">내용</div>                                                    // 그냥 출력 예약어
<br>                                                                            // 줄 바꿈
// html


단위 
    em = 몇 배 
    %  = 몇 퍼센트
    px = 몇 픽셀
단위 


폰트 
    <style>
    body
    {
        font-size = 13.em;                  // 바디의 폰트 사이즈를 13배로 설정.
        font-align = center;                // 폰트의 정렬을 가운데 정렬로 설정.
    }
    </style>
폰트



자료형
- 기본형(원시형)
  * number      : 숫자 (여긴 정수,실수 구분없음 ? ) 
  * string      : 문자열
  * boolean     : 참, 거짓
  * undefineed  : 값을 지정하지 않았을 때 가지는 자료형
  * null        : 자료형에 맞지않은 값을 넣으면 지정되는 자료형
- 복합형
  * object      : 함수와 속성이 포함된 자료형 ( 클래스 ?)
  * array       : 배열 (배열도 객체라는 듯 ?)
자료형


연산자
- 다른 연산자는 C랑 전부 같은데 2개만 더 추가됨. 즉 == 는 자료형을 무시하고, 값만 같으면 참. ex) 3 =="3"  참
  * ===         : 두값이 자료형까지 같은지 검사
  * !==         : 두값이 자료형까지 같지 않지 검사
  * +           : 변수끼리 연산이 연결 연산자로 사용됨                                    ex) 3+"10" == 310
                  나머지 사칙연산은 숫자로 연산해서 처리함(자동형변환).                    ex) "10"-7 == 3
연산자 

    



    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 자바 스크립트 
    var 호이스팅  : 자바 스크립트에선 var선언이 사용되는 곳보다 밑에 있어도 사용할 수 있는데 
                   그걸 호이스팅이라고함.(끌어올려 사용 ?)  다른 변수는 호이스팅 불가능.
    var          : 지역 변수. 특이하게 재선언할 수 있다. 마지막에 선언한 수로 덮어씌움
                   ex) var a =1 ; var a= 5;
    let 변수명;                                              // {}범위를 벗어날수 없게하는 예약어(var의 단점보완용으로 나옴)
                                                                * 블록 변수라고 함.(ES6 부터 나온기능)
                                                                * var보다 let을 쓸것.
    const 변수명;                                            // c++ 상수랑 동일. 
    함수         : 변수 호이스팅처럼 위에 선언되어있을 필요가없음. 정의만 어디든 있다면 사용가능함.
    익명 함수    : 변수에 함수를 넣어서 사용 
                  ex) var UnknowFunc = func(a,b){return a+b};
    즉시 실행함수 : 정의와 동시에 실행함.
                  ex) (function (매개변수가 잇다면 매개변수){실행 내용}(매개변수가 잇다면 매개변수));
    화살표 함수  : ES6부터 나온 함수 정의를 빨리하기 위해 나온 함수 정의 방법(중괄호가 없다)
                  ex) (매개변수)=>함수내용;
    var now     = new Date();                               // 날짜 관련 클래스 ?
	  var display = now.toLocaleTimeString();                 // 날짜 클래스에서 현재 시각을 문자열로 반환함.
    console.log("내용");                                    // 콘솔에 글을 띄움(웹에는 출력안됨)
    prompt("질문","기본 입력 값");                         // 내용과 함께 입력창이 뜨고, 입력된 값을 문자열로 리턴함.  
                                                               2번째 함수 인자는 생략 가능하고, 
                                                               입력 창에 기본 입력값이 설정되 있음(수정가능);
    parseInt(형변환을 할 값);                                // 함수 인자의 값을 명시적 정수형으로 명시적 형변환 
    document.write("<b><big>"+변수명);                      // 화면에 출력함    
                                                            * <b>   볼드(굵은 글씨체)
                                                            * <big> 큰 글씨
    @@@@@@ 선택자는 따로 공부.
    document.querySelector("#선택할 Id값")                   // 선택할 ID값에 해당하는 값을 반환.
    document.querySelector(".선택할 class 이름")             // 선택할 class값에 해당하는 값 모두 반환.
    document.querySelector("#선택할 Id값").innerHTML ="내용" // 선택된 값에 HTML을 내용을 넣음. ??
    document.querySelector
                                                               * 엘리멘트 선택자 ?
    document.getElementById("id값");                        //  querySelector와 비슷하지만 훨씬 빠름.
    document.getElementsByClassName("class값");             // id값은 한개의 객체만 불러오지만, class값에 해당하는 것
                                                               전부 불러온다.
                                                               * dom 방식 선택자 ?
    alert();                                                // 메세지 박스
    typeof 변수명;                                           // 해당 자료형을 조회하는 방법
    배열명1.concat(배열명2);                                  // 배열명1 기준으로 뒤에 배열명2를 연결함.
                                                                * 기존 배열을 만드는거라 기존배열은 보존.
    배열명.join(값 사이에 들어갈 것.);                         // 배열의 값들은 전부 합쳐 문자열로 만듬.
                                                                * a.join();   
                                                                * [1,2,3,4,5]      "1,2,3,4,5"  
                                                                * a.join(":");   
                                                                * [1,2,3,4,5]      "1:2:3:4:5"  
    배열명.push(추가할 값);                                   // 배열 뒤에 값 추가하고 바뀐 배열 값의 갯수를 반환함.
    배열명.unshift(추가할 값);                                // 배열 앞에 값 추가하고 바뀐 배열 값의 갯수를 반환함.
    배열명.pop();                                            // 배열 뒤에 값 추출하고 반환함.
    배열명.shift();                                          // 배열 앞에 값 추출하고 반환함.
    배열명.slice(시작 인덱스 번호, 종료 인덱스 번호);           // 시작 인덱스 번호이상, 종료 인덱스 번호 미만의 값만 배열로 생성.
                                                                * 원본은 건들이지 않고 생성함.
                                                             // 시작 인덱스 번호만 있으면, 시작부터 끝까지 값을 배열로 생성.
    배열명.splice(시작 인덱스 번호, 삭제할 갯수);               // 시작 인덱스 번호부터 삭제할 갯수만큼 추출함.(원본 변함)
    배열명.splice(시작 인덱스 번호, 삭제할 갯수, 추가할 값);     // 시작 인덱스 번호부터 삭제한 값이 있던 장소에 추가할 값을 넣음
                                                                * 한개만 들어가며, 삭제할 갯수가 0 이면 시작 인덱스번호 뒤에
                                                                  추가할 값만 넣음.
    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 자바 스크립트 